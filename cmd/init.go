package cmd

import (
	"fmt"
	"os"
	"path/filepath"
	"turbotilt/internal/render"
	"turbotilt/internal/scan"

	"github.com/spf13/cobra"
)

var (
	// Options pour la commande init
	forceFramework string
	port           string
	jdkVersion     string
	devMode        bool
	detectServices bool
)

var initCmd = &cobra.Command{
	Use:   "init",
	Short: "Scan et g√©n√®re Tiltfile & Compose",
	Run: func(cmd *cobra.Command, args []string) {
		fmt.Println("üîç Initialisation de Turbotilt...")

		// D√©tecter le framework ou utiliser celui sp√©cifi√©
		framework := forceFramework
		var err error

		if framework == "" {
			framework, err = scan.DetectFramework()
			if err != nil {
				fmt.Printf("‚ùå Erreur lors de la d√©tection du framework: %v\n", err)
				return
			}
		}

		fmt.Printf("‚úÖ Framework d√©tect√©/s√©lectionn√©: %s\n", framework)

		// D√©tecter les services si demand√©
		var services []scan.ServiceConfig
		if detectServices {
			fmt.Println("üîç D√©tection des services d√©pendants...")
			services, err = scan.DetectServices()
			if err != nil {
				fmt.Printf("‚ö†Ô∏è Avertissement lors de la d√©tection des services: %v\n", err)
			}

			// Afficher les services d√©tect√©s
			if len(services) > 0 {
				fmt.Println("‚úÖ Services d√©tect√©s:")
				for _, service := range services {
					fmt.Printf("   - %s\n", service.Type)
				}
			} else {
				fmt.Println("‚ÑπÔ∏è Aucun service d√©pendant d√©tect√©")
			}
		}

		// D√©terminer le nom de l'application (dossier courant par d√©faut)
		appName := "app"
		cwd, err := os.Getwd()
		if err == nil {
			appName = filepath.Base(cwd)
		}

		// Pr√©parer les options de rendu
		renderOpts := render.Options{
			Framework:  framework,
			AppName:    appName,
			Port:       port,
			JDKVersion: jdkVersion,
			DevMode:    devMode,
			Services:   services,
		}

		// G√©n√©rer les fichiers
		if err := render.GenerateDockerfile(renderOpts); err != nil {
			fmt.Printf("‚ùå Erreur lors de la g√©n√©ration du Dockerfile: %v\n", err)
			return
		}

		// Utiliser le nouveau g√©n√©rateur de docker-compose avec support des services
		if len(services) > 0 {
			if err := render.GenerateComposeWithServices(renderOpts); err != nil {
				fmt.Printf("‚ùå Erreur lors de la g√©n√©ration du docker-compose.yml: %v\n", err)
				return
			}
		} else {
			if err := render.GenerateCompose(renderOpts); err != nil {
				fmt.Printf("‚ùå Erreur lors de la g√©n√©ration du docker-compose.yml: %v\n", err)
				return
			}
		}

		if err := render.GenerateTiltfile(renderOpts); err != nil {
			fmt.Printf("‚ùå Erreur lors de la g√©n√©ration du Tiltfile: %v\n", err)
			return
		}

		fmt.Println("‚ú® Configuration Turbotilt termin√©e!")
		fmt.Println("üìã Fichiers g√©n√©r√©s:")
		fmt.Println("   - Dockerfile")
		fmt.Println("   - docker-compose.yml")
		fmt.Println("   - Tiltfile")
		fmt.Println("\n‚ñ∂Ô∏è Pour lancer l'environnement: turbotilt up")
	},
}

func init() {
	rootCmd.AddCommand(initCmd)

	// Flags pour la commande init
	initCmd.Flags().StringVarP(&forceFramework, "framework", "f", "", "Sp√©cifier manuellement le framework (spring, quarkus, java)")
	initCmd.Flags().StringVarP(&port, "port", "p", "8080", "Port √† exposer pour l'application")
	initCmd.Flags().StringVarP(&jdkVersion, "jdk", "j", "17", "Version du JDK √† utiliser")
	initCmd.Flags().BoolVarP(&devMode, "dev", "d", true, "Activer les configurations de d√©veloppement")
	initCmd.Flags().BoolVarP(&detectServices, "services", "s", true, "D√©tecter et configurer les services d√©pendants (MySQL, PostgreSQL, etc.)")
}
